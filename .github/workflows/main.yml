name: Build, Push, and Deploy nginx Image to AWS ECR and EC2

on:
  push:
    branches: [main]

jobs:
  build-push-deploy:
    name: Build, Push, and Deploy to ECR and EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitactions
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the image to Amazon ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Log in to Docker registry using password stdin
            echo "${{ secrets.AWS_ACCESS_KEY_ID }}" | docker login -u AWS --password-stdin $ECR_REGISTRY
      
            # Stop and remove the existing container if it exists
            docker stop my-nginx-container || true
            docker rm my-nginx-container || true
      
            # Pull and run the Nginx container with the new image from ECR
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker run -d --name my-nginx-container -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      
